name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        body: |
          ## Changes

          - See [CHANGELOG.md](CHANGELOG.md) for details

          ## Downloads

          ### Static Binaries

          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | Linux | x86_64 | [octocode-${{ steps.get_version.outputs.VERSION }}-x86_64-unknown-linux-musl.tar.gz] |
          | Linux | x86_64 (glibc) | [octocode-${{ steps.get_version.outputs.VERSION }}-x86_64-unknown-linux-gnu.tar.gz] |
          | macOS | x86_64 | [octocode-${{ steps.get_version.outputs.VERSION }}-x86_64-apple-darwin.tar.gz] |
          | macOS | ARM64 | [octocode-${{ steps.get_version.outputs.VERSION }}-aarch64-apple-darwin.tar.gz] |
          | Windows | x86_64 | [octocode-${{ steps.get_version.outputs.VERSION }}-x86_64-pc-windows-gnu.zip] |

          ### Installation

          #### Using Cargo
          ```bash
          cargo install octocode
          ```

          #### Manual Installation
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the binary to a directory in your PATH

          #### Homebrew (macOS)
          ```bash
          brew install octocode
          ```

  build:
    name: Build
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          archive: tar.gz
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          archive: tar.gz
        - target: x86_64-apple-darwin
          os: macos-latest
          archive: tar.gz
        - target: aarch64-apple-darwin
          os: macos-latest
          archive: tar.gz
        - target: x86_64-pc-windows-gnu
          os: ubuntu-latest
          archive: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install protobuf compiler (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install protobuf compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install protobuf

    - name: Install cross-compilation dependencies
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Install cross-compilation dependencies (Windows)
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          ${{ runner.os }}-cargo-

    - name: Build binary
      run: |
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          export CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc
        elif [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
          export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
        fi

        cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest' && !contains(matrix.target, 'windows')
      run: |
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          x86_64-linux-musl-strip target/${{ matrix.target }}/release/octocode
        elif [[ "${{ matrix.target }}" == *"apple"* ]]; then
          strip target/${{ matrix.target }}/release/octocode
        else
          strip target/${{ matrix.target }}/release/octocode
        fi

    - name: Create archive directory
      run: mkdir -p dist

    - name: Create archive (Unix)
      if: matrix.archive == 'tar.gz'
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          tar czf ../../../dist/octocode-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz octocode.exe
        else
          tar czf ../../../dist/octocode-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz octocode
        fi

    - name: Create archive (Windows)
      if: matrix.archive == 'zip'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../dist/octocode-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.zip octocode.exe

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/octocode-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.${{ matrix.archive }}
        asset_name: octocode-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.${{ matrix.archive }}
        asset_content_type: application/octet-stream

  publish:
    name: Publish to crates.io
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install protobuf compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  docker:
    name: Build and Push Docker Images
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION_NO_V }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
